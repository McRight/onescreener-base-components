{"version":3,"file":"main.1675b997ff2537e69c2a.bundle.js","sources":["webpack:///./src/style/global.js","webpack:///./src/style/media.js","webpack:///./src/components/Button.jsx","webpack:///./src/style/colors.js","webpack:///./src/components/ContentContainer.jsx","webpack:///./src/components/atoms/Logo.jsx","webpack:///./src/components/organisms/LogoBox.jsx","webpack:///./src/utils/AutoTextFit.jsx","webpack:///./src/components/organisms/TextBox.jsx","webpack:///./src/components/organisms/GigsBox.jsx","webpack:///./src/components/organisms/MediaBox.jsx","webpack:///./src/components/organisms/ContentBox.jsx","webpack:///./src/components/organisms/LinksBox.jsx","webpack:///./src/components/icons/platform/index.jsx","webpack:///./src/components/templates/Page.jsx","webpack:///./src/components/icons/navigation/Edit.jsx","webpack:///./src/components/icons/navigation/Publish.jsx","webpack:///./src/components/icons/navigation/Themes.jsx","webpack:///./src/components/icons/control/Preview.jsx"],"sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nimport { MediaSmall, MediaMobile } from './media.js'\n\n// FIXME: make sure fonts load in browser\nexport default createGlobalStyle`\n  @font-face {\n    font-family: 'Brandon Text Regular', sans-serif;\n    src: url(/fonts/brandon-text-regular.woff2);\n  }\n\n  :root {\n    --basic-font-size: 14px;\n  }\n\n  @media ${MediaSmall} {\n    :root {\n      --basic-font-size: 12px;\n    }\n  }\n\n  @media ${MediaMobile} {\n    :root {\n      --basic-font-size: 10px;\n    }\n  }\n\n  html {\n    font-size: var(--basic-font-size);\n  }\n\n  body {\n    min-height: 100%;\n    padding: 0;\n    margin: 0 auto;\n    background-color: #f7f7f7;\n    display: flex;\n    justify-content: center;\n    /* define grid layout desktop main mode */\n    width: 100%;\n    font-family: 'Brandon Text Regular', sans-serif;\n    line-height: normal;\n  }\n`\n","export const MediaSmall = '(max-width: 736px)'\nexport const MediaMobile = '(max-width: 480px)'\nexport const NotMediaMobile = '(min-width: 481px)'\n","import styled, { css } from 'styled-components'\n\nimport { black, grey, poison, white } from '../style/colors.js'\n\nconst StyledButton = styled.button`\n  display: flex;\n  justify-content: center;\n  font-size: 1rem;\n  font-weight: 600;\n  color: ${({ secondary, disabled }) =>\n    (disabled && grey) || (secondary && poison) || white};\n  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};\n\n  ${({ round }) =>\n    round\n      ? css`\n          line-height: 40px;\n          padding: 0px;\n          width: 40px;\n          overflow: hidden;\n        `\n      : css`\n          line-height: 1rem;\n          padding: 1rem;\n          width: auto;\n          overflow: none;\n        `};\n\n  min-height: 34px;\n  background-color: ${({ secondary, disabled }) =>\n    (disabled && black) || (secondary && white) || poison};\n  border-radius: ${({ secondary, round }) =>\n    round ? '50%' : secondary ? '2px' : '3px'};\n  border-width: 0;\n  border-style: solid;\n  border-color: black;\n  box-shadow: ${({ shadow }) =>\n    shadow\n      ? '0 1px 3px 0 rgba(0,0,0,0.08), 0 1px 0 0 rgba(0,0,0,0.05), 0 0 0 1px rgba(0,0,0,0.05)'\n      : 'none'};\n\n  &:hover:not([disabled]) {\n    color: ${poison};\n    background-color: ${black};\n  }\n\n  transition: color 0.3s ease-out, background-color 0.3s ease-out;\n`\n\nexport default StyledButton\n","const poison = '#27e200'\nconst white = '#ffffff'\nconst grey = '#5f5f5f'\nconst black = '#000000'\n\nexport { grey, poison, black, white }\n\nexport default {\n  grey,\n  poison,\n  black,\n  white,\n}\n","import styled from 'styled-components'\n\nconst ContentContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: auto;\n\n  display: flex;\n  flex-flow: column;\n  justify-content: center;\n  align-items: center;\n\n  padding-top: 50px; /* height of top navigation bar */\n  padding-bottom: 68px; /* height of bottom bar */\n`\n\nexport default ContentContainer\n","/* eslint-disable react/prop-types */\n\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst LogoSize = {\n  XS: '8.333%',\n  S: '16.666%',\n  M: '33.333%',\n  L: '50%',\n  XL: '66.666%',\n}\n\nconst LogoImage = styled.img`\n  display: block;\n  object-fit: contain;\n  max-height: 45vh;\n  max-width: 800px;\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  margin: 1rem;\n`\n\nexport const Logo = ({ logo }) =>\n  logo && logo.image ? (\n    <LogoImage src={logo.image.url} size={LogoSize[logo.size]} />\n  ) : null\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\n\nconst LogoContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  margin: var(--margin-logo);\n  z-index: ${({ zIndex }) => zIndex};\n  pointer-events: none;\n\n  &.top-left {\n    align-items: flex-start;\n    justify-content: flex-start;\n  }\n\n  &.top-center {\n    align-items: flex-start;\n    justify-content: center;\n  }\n\n  &.top-right {\n    align-items: flex-start;\n    justify-content: flex-end;\n  }\n\n  &.center-left {\n    align-items: center;\n    justify-content: flex-start;\n  }\n\n  &.center-center {\n    align-items: center;\n    justify-content: center;\n  }\n\n  &.center-right {\n    align-items: center;\n    justify-content: flex-end;\n  }\n\n  &.bottom-left {\n    align-items: flex-end;\n    justify-content: flex-start;\n  }\n\n  &.bottom-center {\n    align-items: flex-end;\n    justify-content: center;\n  }\n\n  &.bottom-right {\n    align-items: flex-end;\n    justify-content: flex-end;\n  }\n`\n\nexport const LogoBox = ({ position, children, ...other }) => (\n  <LogoContainer\n    className={\n      position > '' ? position.toLowerCase().replace('_', '-') : 'top-center'\n    }\n    {...other}\n  >\n    {children}\n  </LogoContainer>\n)\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst AutoFitTextContainer = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n`\n\nconst DEFAULTS = {\n  // amount of increasing or decreasing the fontsize\n  step: 0.5,\n\n  // the maximum font size in pixel.\n  maxFontSize: 100,\n\n  // the maximum font size in pixel.\n  minFontSize: 1,\n\n  // avoid line breaks\n  includeWidth: false,\n}\n\nconst updateFontSize = (\n  element,\n  { maxFontSize, minFontSize, step, includeWidth }\n) => {\n  const style = window.getComputedStyle(element)\n  let fontSize = parseInt(style.fontSize)\n  let fontSizeCandidate = maxFontSize\n\n  const parentWidth = element.parentElement.clientWidth\n  const parentHeight = element.parentElement.clientHeight\n\n  const inBounds = () => {\n    return (\n      parentHeight >= element.scrollHeight &&\n      (!includeWidth || parentWidth >= element.scrollWidth)\n    )\n  }\n\n  const grow = () => {\n    fontSize += step\n\n    // Match criteria for currentFontSize\n    if (fontSize >= fontSizeCandidate || fontSize >= maxFontSize) return\n\n    // Set new style\n    element.style.fontSize = `${fontSize}px`\n\n    // Recursive shrink or grow\n    if (inBounds()) {\n      grow()\n    } else {\n      fontSizeCandidate = fontSize\n      shrink()\n    }\n  }\n\n  const shrink = () => {\n    fontSize -= step\n\n    // Match criteria for fontSizeCandidate\n    if (fontSize <= minFontSize) return\n\n    // Set new style\n    element.style.fontSize = `${fontSize}px`\n\n    // Recursive shrink or grow\n    if (inBounds()) {\n      grow()\n    } else {\n      shrink()\n    }\n  }\n\n  // Kick off resizing\n  if (inBounds()) {\n    grow()\n  } else {\n    shrink()\n  }\n\n  return\n}\n\nexport const AutoTextFit = ({ children, ...options }) => {\n  let TextContainer = React.createRef()\n  const [initialized, setInitialized] = useState(false)\n  const [resizing, setResizing] = useState(false)\n  const [windowSize, setWindowSize] = useState(\n    `${window.innerWidth}/${window.innerHeight}`\n  )\n\n  useEffect(() => {\n    if (!resizing) {\n      setResizing(true)\n      const element = TextContainer.current\n      updateFontSize(element, options)\n      return () => setResizing(false)\n    }\n  }, [windowSize])\n\n  // Add window resize listener\n  useEffect(() => {\n    const setNewWindowSize = () =>\n      setWindowSize(`${window.innerWidth}/${window.innerHeight}`)\n    window.addEventListener('resize', setNewWindowSize)\n    setInitialized(true)\n    return () => window.removeEventListener('resize', setNewWindowSize)\n  }, [initialized])\n\n  return (\n    <AutoFitTextContainer>\n      <div ref={TextContainer}>{children}</div>\n    </AutoFitTextContainer>\n  )\n}\n\nAutoTextFit.propTypes = {\n  step: PropTypes.number,\n  maxFontSize: PropTypes.number,\n  minFontSize: PropTypes.number,\n  onResize: PropTypes.bool,\n  includeWidth: PropTypes.bool,\n  children: PropTypes.node,\n}\n\nAutoTextFit.defaultProps = DEFAULTS\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { MediaSmall } from '../../style/media.js'\nimport { AutoTextFit } from '../../utils/AutoTextFit.jsx'\n\nconst Text = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  padding: 1rem 2rem;\n  overflow: hidden;\n  background-color: ${({ colorBackground }) =>\n    colorBackground || 'transparent'};\n  color: ${({ color }) => color};\n  transition: color 0.3s ease-out;\n\n  & h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  a,\n  li,\n  p,\n  span {\n    font-size: 1em;\n    color: ${({ color }) => color};\n    white-space: ${({ includeWidth }) =>\n      includeWidth ? 'nowrap' : 'pre-wrap'};\n    transition: color 0.3s ease-out;\n    line-height: 1.2;\n    margin: 1em 0;\n    padding: 0;\n  }\n\n  & a:hover {\n    color: ${({ color, colorAccent }) => colorAccent || color};\n  }\n\n  & h1 {\n    font-size: 1.8em;\n    font-weight: bold;\n  }\n\n  & h2 {\n    font-size: 1.5em;\n    font-weight: bold;\n  }\n\n  & h3 {\n    font-size: 1.2em;\n  }\n\n  & h4 {\n    font-size: 1em;\n  }\n\n  & h5 {\n    font-size: 0.8em;\n  }\n`\n\nexport const TextBox = ({\n  children,\n  color,\n  colorBackground,\n  colorAccent,\n  includeWidth,\n  ...otherOptions\n}) => (\n  <Text\n    color={color}\n    colorBackground={colorBackground}\n    colorAccent={colorAccent}\n    includeWidth={includeWidth}\n  >\n    <AutoTextFit includeWidth={includeWidth} {...otherOptions}>\n      {children}\n    </AutoTextFit>\n  </Text>\n)\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\nimport { useAsync } from 'react-async'\n\nimport { TextBox } from './TextBox.jsx'\n\nimport { getGigs } from '../../api/gigs/index.js'\n\nconst GigHead = styled.h2`\n  margin-top: 0;\n  color: ${({ color }) => color};\n`\n\nconst GigList = styled.ul`\n  padding: 0;\n  margin: 0;\n`\n\nconst Gig = styled.li`\n  display: flex;\n  flex-wrap: wrap;\n  padding: 8px;\n  list-style: none;\n  color: ${({ color }) => color};\n  margin: 1em 0;\n  transition: all 0.3s ease-out;\n\n  & p.gig {\n    margin: 0;\n    line-height: 1.5;\n  }\n`\n\nconst StartDate = styled.p`\n  width: 7em;\n`\nconst Event = styled.p`\n  min-width: 10em;\n\n  & a {\n    text-decoration: underline ${({ color }) => color};\n\n    & :hover {\n      color: ${({ colorAccent }) => colorAccent};\n      text-decoration: underline ${({ colorAccent }) => colorAccent};\n    }\n  }\n`\nconst Venue = styled.p`\n  min-width: 10em;\n`\n\nconst InfoText = styled.p`\n  color: ${({ color }) => color};\n`\n\nconst ShowMoreButton = styled.button`\n  font-size: 1em;\n  line-height: 1em;\n  width: auto;\n  margin: 0.5em auto;\n  padding: 0.5em 1.8em 0.5em 2.2em;\n  border-color: ${({ color }) => color || 'transparent'};\n  border-width: ${({ border }) => border / 10}rem;\n  border-style: solid;\n  border-radius: ${({ square, circle }) =>\n    (circle && '1em') || (square && 0) || '0.4rem'};\n  color: ${({ color }) => color};\n  background-color: transparent;\n  transition: color 0.3s, background-color 0.3s, border 0.3s;\n\n  :hover {\n    color: ${({ colorAccent }) => colorAccent};\n    border-color: ${({ colorAccent }) => colorAccent};\n    background-color: ${({ colorBackgroundAccent }) => colorBackgroundAccent};\n  }\n`\n\nexport const GigsBox = ({\n  api,\n  border,\n  circle,\n  color,\n  colorAccent,\n  colorBackground,\n  colorBackgroundAccent,\n  slug,\n  square,\n}) => {\n  const { data, error, isLoading } = useAsync({\n    promiseFn: getGigs,\n    api,\n    slug,\n    limit: 3,\n  })\n\n  console.log(data)\n\n  return (\n    (isLoading && <InfoText color={color}>Loading gigs ...</InfoText>) ||\n    ((error || !data) && <InfoText color={color}>No gigs found</InfoText>) || (\n      <TextBox\n        color={color}\n        colorAccent={colorAccent}\n        colorBackground={colorBackground}\n        colorBackgroundAccent={colorBackgroundAccent}\n      >\n        <GigHead>Upcoming Gigs</GigHead>\n        <GigList>\n          {data.map(({ title, startDate, venue, website }, key) => (\n            <Gig key={key} color={color} colorAccent={colorAccent}>\n              <StartDate className=\"gig\">{startDate}</StartDate>\n              <Event className=\"gig\">\n                {website ? <a href={website}>{title}</a> : title}\n              </Event>\n              <Venue className=\"gig\">\n                {venue.name}, {venue.city}\n              </Venue>\n            </Gig>\n          ))}\n        </GigList>\n        <a\n          href={`https://api.optune.me/v4/events/${slug}?header=1&theme=black&ticketlinks=true`}\n        >\n          <ShowMoreButton\n            border={border}\n            color={color}\n            colorAccent={colorAccent}\n            colorBackground={colorBackground}\n            colorBackgroundAccent={colorBackgroundAccent}\n            circle={circle}\n            square={square}\n          >\n            Show More\n          </ShowMoreButton>\n        </a>\n      </TextBox>\n    )\n  )\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\nimport ReactPlayer from 'react-player'\n\nconst Fullscreen = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100vh;\n  width: 100vw;\n`\n\nexport const MediaBox = ({ media }) =>\n  media.fullscreen ? (\n    <Fullscreen>\n      <ReactPlayer url={media.url} playing={false} width=\"100%\" height=\"100%\" />\n    </Fullscreen>\n  ) : (\n    <ReactPlayer url={media.url} playing={false} width=\"100%\" height=\"100%\" />\n  )\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled, { css } from 'styled-components'\n\nimport { TextBox } from '../organisms/TextBox.jsx'\nimport { GigsBox } from '../organisms/GigsBox.jsx'\nimport { MediaBox } from '../organisms/MediaBox.jsx'\n\nimport { MediaSmall, MediaMobile } from '../../style/media.js'\n\nimport { renderHtml } from '../../utils/renderHtml.js'\n\nconst GridSize = 6\nconst GridUnit = 16.666 // = 100 : 6\nconst MaxSpanMobile = 4 * GridUnit\nconst LinkMargin = 5\n\nconst getGridArea = (\n  { startRow, startColumn, endRow, endColumn, rowSpan, columnSpan },\n  linksPosition\n) => {\n  // Decide if margin is calculated from top or bottom and left or right\n  const isLeft = GridSize - endColumn >= startColumn - 1\n  const positionH = isLeft ? 'left' : 'right'\n\n  const isTop = GridSize - endRow >= startRow - 1\n  const positionV = isTop ? 'top' : 'bottom'\n\n  // Calculate vertical and horizontal margins and width\n  const marginHUnit = isLeft ? startColumn - 1 : 6 - endColumn\n  const marginH = (marginHUnit * GridUnit).toFixed(3)\n\n  const marginVUnit = isTop ? startRow - 1 : 6 - endRow\n  const marginV = (marginVUnit * GridUnit).toFixed(3)\n\n  let marginVLinks = 0\n  let marginHLinks = 0\n\n  // Give extra margin if links are at same side as content\n  switch (linksPosition) {\n    case 'BOTTOM_CENTER':\n    case 'BOTTOM_LEFT':\n    case 'BOTTOM_RIGHT':\n      if (!isTop) marginVLinks += LinkMargin\n      break\n    case 'CENTER_RIGHT':\n      if (!isLeft) marginHLinks += LinkMargin\n      break\n    case 'CENTER_LEFT':\n      if (isLeft) marginHLinks += LinkMargin\n      break\n    default:\n    // Do nothing\n  }\n\n  const width = columnSpan * GridUnit\n  const widthCorrection = (columnSpan * (marginHLinks + 2)) / GridSize\n  const height = rowSpan * GridUnit\n  const heightCorrection = (rowSpan * (marginVLinks + 2)) / GridSize\n\n  const area = `\n    ${positionH}: calc(${marginH}vw + ${marginHLinks + 1}rem);\n    ${positionV}: calc(${marginV}vh + ${marginVLinks + 1}rem);\n    width: calc(${width}vw - ${widthCorrection}rem);\n    height: calc(${height}vh - ${heightCorrection}rem);\n\n    @media ${MediaMobile} {\n      ${positionH}: calc(${marginH}vw + 1rem);\n      ${positionV}: calc(${marginV}vh + ${isTop ? 1 : LinkMargin + 1}rem);\n      width: calc(${width}vw - ${(columnSpan * 2) / GridSize}rem);\n      height: calc(${height}vh - ${(rowSpan * (LinkMargin + 2)) / GridSize}rem);\n    }\n  `\n\n  return css`\n    ${area}\n  `\n}\n\nconst FullscreenContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 100vh;\n  width: 100vw;\n  z-index: 1;\n`\nconst ResponsiveContainer = styled.div`\n  position: absolute;\n  z-index: 3;\n  \n  ${({ area, linksPosition }) => getGridArea(area, linksPosition)}\n\n  @media ${MediaSmall} {\n    min-width: 33.333vw;\n    min-height: 33.333vw;\n  }\n`\n\nconst getArea = ({ position, span }) => {\n  const [startRowField, startColumnField] = (position || '4/2').split('/')\n  const [rowSpanField, columnSpanField] = (span || '2/4').split('/')\n\n  const startRow = parseInt(startRowField)\n  const startColumn = parseInt(startColumnField)\n  const rowSpan = parseInt(rowSpanField)\n  const columnSpan = parseInt(columnSpanField)\n  const endRow = startRow + parseInt(rowSpan) - 1\n  const endColumn = startColumn + parseInt(columnSpan) - 1\n\n  return { startRow, startColumn, endRow, endColumn, rowSpan, columnSpan }\n}\n\nexport const ContentBox = ({ content, links }) => {\n  /*\n   * Get content values\n   */\n  const {\n    color,\n    colorAccent,\n    colorBackground,\n    colorBackgroundAccent,\n    gigsAPI,\n    media,\n    position,\n    span,\n    text,\n    type,\n  } = content\n  const { provider, slug } = gigsAPI || { provider: '', slug: '' }\n  const colors = { color, colorAccent, colorBackground, colorBackgroundAccent }\n  const area = getArea({ position, span })\n  const { border, circle, square } = links\n\n  /*\n   * Set content component\n   */\n\n  let fullscreen = false\n  let Content\n  switch (type) {\n    case 'GIGS':\n      Content = (\n        <GigsBox\n          api={provider}\n          border={border}\n          circle={circle}\n          slug={slug}\n          square={square}\n          {...colors}\n        />\n      )\n      break\n    case 'MEDIA':\n      Content = <MediaBox media={media} />\n      fullscreen = media.fullscreen\n      break\n\n    default:\n      Content = <TextBox {...colors}>{renderHtml(text)}</TextBox>\n      break\n  }\n\n  return fullscreen ? (\n    <FullscreenContainer>{Content}</FullscreenContainer>\n  ) : (\n    <ResponsiveContainer\n      area={area}\n      linksPosition={links.list.length > 0 ? links.position : 'NONE'}\n    >\n      {Content}\n    </ResponsiveContainer>\n  )\n}\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { MediaMobile, NotMediaMobile } from '../../style/media.js'\n\nconst LinksContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: flex;\n  margin: 0;\n  z-index: ${({ zIndex }) => zIndex};\n  pointer-events: none;\n`\n\nconst LinksList = styled.div`\n  position: absolute;\n  display: flex;\n  flex-flow: row;\n  width: 100%;\n  height: auto;\n  pointer-events: all;\n\n  @media ${NotMediaMobile} {\n    &.bottom-center {\n      bottom: 0;\n      justify-content: center;\n      white-space: nowrap;\n    }\n\n    &.bottom-left {\n      bottom: 0;\n      justify-content: flex-start;\n      white-space: nowrap;\n    }\n\n    &.bottom-right {\n      bottom: 0;\n      justify-content: flex-end;\n      white-space: nowrap;\n    }\n\n    &.center-right {\n      right: 0;\n      width: auto;\n      height: 100%;\n      flex-flow: column;\n      justify-content: center;\n    }\n\n    &.center-left {\n      left: 0;\n      width: auto;\n      height: 100%;\n      flex-flow: column;\n      justify-content: center;\n    }\n  }\n\n  @media ${MediaMobile} {\n    bottom: 0;\n    justify-content: center;\n    white-space: nowrap;\n  }\n`\n\nexport const LinksBox = ({ children, position, zIndex }) => (\n  <LinksContainer zIndex={zIndex}>\n    <LinksList\n      className={\n        position > ''\n          ? position.toLowerCase().replace('_', '-')\n          : 'bottom-center'\n      }\n    >\n      {children}\n    </LinksList>\n  </LinksContainer>\n)\n","/* eslint-disable react/prop-types */\nimport React from 'react'\nimport styled from 'styled-components'\n\nimport { AboutIcon } from './About.jsx'\nimport { ArtistProfileIcon } from './ArtistProfile.jsx'\nimport { RequestFormIcon } from './RequestForm.jsx'\nimport { PressKitIcon } from './PressKit.jsx'\nimport { GigsIcon } from './Gigs.jsx'\nimport { BandcampIcon } from './Bandcamp.jsx'\nimport { BiographyIcon } from './Biography.jsx'\nimport { FacebookIcon } from './Facebook.jsx'\nimport { InstagramIcon } from './Instagram.jsx'\nimport { LastFMIcon } from './LastFM.jsx'\nimport { MailIcon } from './Mail.jsx'\nimport { MixcloudIcon } from './Mixcloud.jsx'\nimport { OptuneIcon } from './Optune.jsx'\nimport { SoundcloudIcon } from './Soundcloud.jsx'\nimport { SpotifyIcon } from './Spotify.jsx'\nimport { TechRiderIcon } from './TechRider.jsx'\nimport { TumblrIcon } from './Tumblr.jsx'\nimport { TwitterIcon } from './Twitter.jsx'\nimport { YoutubeIcon } from './Youtube.jsx'\n\nexport const PlatformLinkIcon = {\n  // Optune Links\n  OPTUNEARTISTPROFILE: ArtistProfileIcon,\n  OPTUNEBOOKINGS: GigsIcon,\n  OPTUNEREQUESTFORM: RequestFormIcon,\n  // Platform Links\n  BANDCAMP: BandcampIcon,\n  FACEBOOK: FacebookIcon,\n  INSTAGRAM: InstagramIcon,\n  LASTFM: LastFMIcon,\n  MIXCLOUD: MixcloudIcon,\n  SOUNDCLOUD: SoundcloudIcon,\n  SPOTIFY: SpotifyIcon,\n  TUMBLR: TumblrIcon,\n  TWITTER: TwitterIcon,\n  YOUTUBE: YoutubeIcon,\n  // Content (URL) Links\n  ABOUT: AboutIcon,\n  BIOGRAPHY: BiographyIcon,\n  MAIL: MailIcon,\n  PRESSKIT: PressKitIcon,\n  TECHRIDER: TechRiderIcon,\n}\n\nconst Link = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 3.6rem;\n  height: 3.6rem;\n  padding: 0px;\n  background-color: ${({ colorBackground }) => colorBackground};\n  border-radius: ${({ circle, square }) =>\n    (circle && '50%') || (square && 'none') || '0.4rem'};\n  border-color: ${({ color }) => color || 'transparent'};\n  border-width: ${({ border }) => border / 10}rem;\n  border-style: solid;\n  box-sizing: border-box;\n  box-shadow: ${({ noShadow }) =>\n    noShadow\n      ? 'none'\n      : '0 1px 3px 0 rgba(0, 0, 0, 0.08), 0 1px 0 0 rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.05)'};\n  transition: border-color 0.25s ease-out, background-color 0.25s ease-out;\n\n  margin: 1rem;\n\n  &:hover:not(:focus) {\n    background-color: ${({ colorBackgroundAccent }) => colorBackgroundAccent};\n    border-color: ${({ colorAccent }) => colorAccent};\n\n    & .icon g {\n      & path,\n      line,\n      circle,\n      polygon,\n      polyline,\n      rect,\n      ellipse {\n        fill: ${({ colorAccent }) => colorAccent};\n        stroke: ${({ colorAccent }) => colorAccent};\n\n        &[fill='none'] {\n          fill: none;\n        }\n\n        &[stroke='none'] {\n          stroke: none;\n        }\n      }\n    }\n  }\n`\nconst LinkIconMapper = ({ platform }) => styled(PlatformLinkIcon[platform])`\n  width: 2rem;\n  height: 2rem;\n\n  &.icon g {\n    & path,\n    line,\n    circle,\n    polygon,\n    polyline,\n    rect,\n    ellipse {\n      fill: ${({ color }) => color};\n      stroke: ${({ color }) => color};\n      transition: fill 0.25s ease-out, stroke 0.25 ease-out;\n\n      &[fill='none'] {\n        fill: none;\n      }\n\n      &[stroke='none'] {\n        stroke: none;\n      }\n    }\n  }\n`\n\nexport const PlatformLink = ({\n  border,\n  circle,\n  color,\n  colorAccent,\n  colorBackground,\n  colorBackgroundAccent,\n  noShadow,\n  platform,\n  square,\n  url,\n}) => {\n  const Icon = LinkIconMapper({ platform })\n  return (\n    <a href={url}>\n      <Link\n        border={border}\n        circle={circle}\n        color={color}\n        colorAccent={colorAccent}\n        colorBackground={colorBackground}\n        colorBackgroundAccent={colorBackgroundAccent}\n        noShadow\n        square={square}\n      >\n        <Icon color={color} />\n      </Link>\n    </a>\n  )\n}\n\nexport const PlatformLinks = Object.keys(PlatformLinkIcon).map(platform => {\n  const Icon = LinkIconMapper({ platform })\n  const LinkIcon = ({\n    border,\n    color,\n    colorAccent,\n    colorBackground,\n    colorBackgroundAccent,\n    onClick,\n  }) => (\n    <a onClick={onClick}>\n      <Link\n        border={border}\n        color={color}\n        colorAccent={colorAccent}\n        colorBackground={colorBackground}\n        colorBackgroundAccent={colorBackgroundAccent}\n      >\n        <Icon color={color} />\n      </Link>\n    </a>\n  )\n\n  return {\n    platform,\n    LinkIcon,\n  }\n})\n\nexport const Links = (links, content) =>\n  links.list\n    .filter(({ platform, url }) => !!PlatformLinkIcon[platform] && url > '')\n    .map(link => (\n      <PlatformLink\n        key={link.platform}\n        border={links.border}\n        circle={links.circle}\n        square={links.square}\n        {...link}\n        {...content}\n      />\n    ))\n","/* eslint-disable react/prop-types */\nimport React, { Fragment } from 'react'\nimport styled from 'styled-components'\n\nimport { Logo } from '../atoms/Logo.jsx'\n\nimport { LogoBox } from '../organisms/LogoBox.jsx'\nimport { ContentBox } from '../organisms/ContentBox.jsx'\nimport { LinksBox } from '../organisms/LinksBox.jsx'\n\nimport { Links } from '../icons/platform/index.jsx'\n\nimport GlobalStyle from '../../style/global.js'\n\nconst PageContainer = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  background-color: ${({ color }) => color};\n  background-image: ${({ image }) => `url(${image})`};\n  background-repeat: no-repeat;\n  background-position: ${({ focusPoint }) => focusPoint};\n  background-size: ${({ fullscreen }) => (fullscreen ? 'cover' : 'contain')};\n  display: flex;\n`\n\nconst BackLink = styled.a`\n  position: fixed;\n  background-image: url(https://www.onescreener.com/img/onescreener-logo.svg);\n  background-size: 60px 15px;\n  background-color: #808080;\n  background-position: center;\n  background-repeat: no-repeat;\n  width: 70px;\n  height: 15px;\n  opacity: 0.3;\n  transform: rotate(-90deg);\n  transform-origin: 100% 100%;\n  right: 0;\n`\n\nexport const Page = ({ page }) => {\n  const { background, logo, content, gigAPI } = page\n  const { links } = page || { links: { list: [] } }\n\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <PageContainer\n        image={background.image && background.image.url}\n        focusPoint={background.focusPoint}\n        fullscreen={background.fullscreen}\n        color={background.color}\n      >\n        {/* Back Link to onescreener.com */}\n        <BackLink\n          href=\"http://www.onescreener.com\"\n          target=\"_blank\"\n          title=\"created with onescreener.com\"\n        >\n          <span>created by onescreener.com</span>\n        </BackLink>\n\n        {/* Logo */}\n        {logo && logo.image && (\n          <LogoBox position={logo.position} zIndex={2}>\n            <Logo logo={logo} />\n          </LogoBox>\n        )}\n\n        {/* Logo */}\n        <ContentBox\n          content={content}\n          links={links}\n        />\n\n        {/* Links */}\n        {links.list.length > 0 && (\n          <LinksBox position={links.position} zIndex={4}>\n            {Links(links, content)}\n          </LinksBox>\n        )}\n      </PageContainer>\n    </Fragment>\n  )\n}\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst width = '20'\nconst height = '20'\nconst viewBox = '0 0 20 20'\n\nconst getDimensions = () => ({\n  height,\n  width,\n})\n\nconst getDimensionsCss = () => css`\n  width: ${width}px;\n  height: ${height}px;\n`\n\nconst Image = styled.svg`\n  ${({ noStyles }) => (!noStyles ? getDimensionsCss() : null)};\n`\n\nconst defaultProps = {\n  children: [\n    <g fill=\"none\" fillRule=\"evenodd\" key=\"key-0\">\n      <path\n        fill=\"#6F717D\"\n        fillRule=\"nonzero\"\n        d=\"M18.815.98A3.198 3.198 0 0 0 16.58 0a3.64 3.64 0 0 0-2.414 1.056L1.827 13.418a.625.625 0 0 0-.168.288c-.268 1-1.622 5.44-1.634 5.484a.625.625 0 0 0 .593.8.505.505 0 0 0 .2 0c.05 0 4.628-1.493 5.377-1.718a.723.723 0 0 0 .268-.156c.474-.475 11.66-11.55 12.402-12.319A3.463 3.463 0 0 0 20 3.348 3.412 3.412 0 0 0 18.815.981zm-3.097.38l2.864 2.88L6.818 16.077 4 13.2 15.718 1.36z\"\n      />\n    </g>,\n  ],\n  viewBox,\n}\n\nexport const EditIcon = Object.assign(Image, {\n  getDimensions,\n  getDimensionsCss,\n  defaultProps,\n  displayName: 'Edit',\n})\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst width = '22'\nconst height = '22'\nconst viewBox = '0 0 22 22'\n\nconst getDimensions = () => ({\n  height,\n  width,\n})\n\nconst getDimensionsCss = () => css`\n  width: ${width}px;\n  height: ${height}px;\n`\n\nconst Image = styled.svg`\n  ${({ noStyles }) => (!noStyles ? getDimensionsCss() : null)};\n`\n\nconst defaultProps = {\n  children: [\n    <g fill=\"none\" fillRule=\"evenodd\" key=\"key-0\">\n      <path\n        fill=\"#6F717D\"\n        fillRule=\"nonzero\"\n        d=\"M11.545.162l10 6.5A1 1 0 0 1 22 7.5v7a1 1 0 0 1-.455.838l-10 6.5a1 1 0 0 1-1.09 0l-10-6.5A1 1 0 0 1 0 14.5v-7a1 1 0 0 1 .455-.838l10-6.5a1 1 0 0 1 1.09 0zM11 2.192l-9 5.85v5.915l9 5.85 9-5.85V8.043l-9-5.85zm0 11.087l9.427-6.598a1 1 0 0 1 1.146 1.638l-10 7a1 1 0 0 1-1.146 0l-10-7a1 1 0 1 1 1.146-1.638L11 13.279zm0-4.558l-9.427 6.598a1 1 0 0 1-1.146-1.638l10-7a1 1 0 0 1 1.146 0l10 7a1 1 0 1 1-1.146 1.638L11 8.721zM12 21a1 1 0 0 1-2 0v-6.5a1 1 0 1 1 2 0V21zM10 1a1 1 0 1 1 2 0v6.5a1 1 0 0 1-2 0V1z\"\n      />\n    </g>,\n  ],\n  viewBox,\n}\n\nexport const PublishIcon = Object.assign(Image, {\n  getDimensions,\n  getDimensionsCss,\n  defaultProps,\n  displayName: 'Publish',\n})\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst width = '25'\nconst height = '20'\nconst viewBox = '0 0 24 20'\n\nconst getDimensions = () => ({\n  height,\n  width,\n})\n\nconst getDimensionsCss = () => css`\n  width: ${width}px;\n  height: ${height}px;\n`\n\nconst Image = styled.svg`\n  ${({ noStyles }) => (!noStyles ? getDimensionsCss() : null)};\n`\n\nconst defaultProps = {\n  children: [\n    <g fill=\"none\" fillRule=\"evenodd\" key=\"key-0\">\n      <path\n        fill=\"#27E200\"\n        fillRule=\"nonzero\"\n        d=\"M22.5 16.148h-9.75v2.314h3.75c.413 0 .75.346.75.77a.762.762 0 0 1-.75.768h-9a.762.762 0 0 1-.75-.769c0-.423.338-.769.75-.769h3.75v-2.314H1.5c-.825 0-1.5-.692-1.5-1.538V1.538C0 .692.675 0 1.5 0h21c.825 0 1.5.692 1.5 1.538V14.61c0 .846-.675 1.538-1.5 1.538zm0-14.61h-21V14.61h21V1.538z\"\n      />\n    </g>,\n  ],\n  viewBox,\n}\n\nexport const ThemesIcon = Object.assign(Image, {\n  getDimensions,\n  getDimensionsCss,\n  defaultProps,\n  displayName: 'Themes',\n})\n","import React from 'react'\nimport styled, { css } from 'styled-components'\n\nconst width = '32'\nconst height = '26'\nconst viewBox = '0 0 32 26'\n\nconst getDimensions = () => ({\n  height,\n  width,\n})\n\nconst getDimensionsCss = () => css`\n  width: ${width}px;\n  height: ${height}px;\n`\n\nconst Image = styled.svg`\n  ${({ noStyles }) => (!noStyles ? getDimensionsCss() : null)};\n\n  & use[id='black'] {\n    fill: #000;\n    transition: fill 0.3s ease-out;\n  }\n\n  & use[id='white'] {\n    fill: #fff;\n    transition: fill 0.3s ease-out;\n  }\n`\n\nconst defaultProps = {\n  children: [\n    <defs key=\"key-0\">\n      <path\n        id=\"s-3d4a82ba12-b\"\n        d=\"M.106 11.553c.14-.281.404-.75.788-1.346a20.492 20.492 0 0 1 2.251-2.89C5.661 4.631 8.62 3 12 3c3.38 0 6.339 1.632 8.855 4.316a20.492 20.492 0 0 1 2.25 2.891c.385.596.649 1.065.79 1.346a1 1 0 0 1 0 .894c-.141.281-.405.75-.79 1.346a20.492 20.492 0 0 1-2.25 2.89C18.339 19.369 15.38 21 12 21c-3.38 0-6.339-1.632-8.855-4.316a20.492 20.492 0 0 1-2.25-2.891 15.188 15.188 0 0 1-.79-1.346 1 1 0 0 1 0-.894zm2.468 1.154c.575.89 1.254 1.781 2.03 2.61C6.777 17.631 9.255 19 12 19c2.745 0 5.224-1.368 7.395-3.684A18.513 18.513 0 0 0 21.86 12a18.513 18.513 0 0 0-2.464-3.316C17.224 6.368 14.745 5 12 5 9.255 5 6.776 6.368 4.605 8.684A18.513 18.513 0 0 0 2.14 12c.126.218.27.455.433.707zM16 12c0 2.552-1.448 4-4 4s-4-1.448-4-4 1.448-4 4-4 4 1.448 4 4zm-2 0c0-1.448-.552-2-2-2s-2 .552-2 2 .552 2 2 2 2-.552 2-2z\"\n      />\n      <filter\n        id=\"s-3d4a82ba12-a\"\n        width=\"150%\"\n        height=\"166.7%\"\n        x=\"-25%\"\n        y=\"-33.3%\"\n        filterUnits=\"objectBoundingBox\"\n      >\n        <feOffset in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n        <feGaussianBlur\n          in=\"shadowOffsetOuter1\"\n          result=\"shadowBlurOuter1\"\n          stdDeviation=\"2\"\n        />\n        <feColorMatrix\n          in=\"shadowBlurOuter1\"\n          values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.5 0\"\n        />\n      </filter>\n    </defs>,\n    <g fill=\"none\" fillRule=\"evenodd\" key=\"key-1\">\n      <path d=\"M4 1h24v24H4z\" />\n      <g fillRule=\"nonzero\" transform=\"translate(4 1)\">\n        <use\n          id=\"black\"\n          filter=\"url(#s-3d4a82ba12-a)\"\n          xlinkHref=\"#s-3d4a82ba12-b\"\n        />\n        <use id=\"white\" fillRule=\"evenodd\" xlinkHref=\"#s-3d4a82ba12-b\" />\n      </g>\n    </g>,\n  ],\n  viewBox,\n}\n\nexport const PreviewIcon = Object.assign(Image, {\n  getDimensions,\n  getDimensionsCss,\n  defaultProps,\n  displayName: 'Preview',\n})\n"],"mappings":"AAKA;;;;;;;;;;ACLA;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;ACgDA;;;;;AAxCA;AAEA;AACA;AACA;;;;;AAQA;;;;;;;;AAQA;AAEA;;;;AAKA;AACA;;ACrCA;AAGA;;;;ACaA;;;;;;;;;;;;ACXA;;;;;AAaA;AACA;;AAIA;;;;;;;;ACXA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;AC2BA;;;;;;AC3EA;AAEA;;;;;;;;;;;;;AAaA;AACA;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;ACrDA;AAGA;;;AAKA;;;;;AAKA;;;;;;;;AAUA;;AAGA;;;;AAIA;AACA;;AAEA;AACA;;;AAIA;;AAIA;AACA;AAGA;;;;;;AAMA;AACA;;AAEA;AAEA;;;;;AAKA;AACA;AACA;;AAiCA;;;;;;AC/FA;;;;;;;AC0EA;;;;AAIA;AAhBA;AAgBA;AACA;AV5FA;;;;AUiHA;;;;;;;;ACnGA;;AAIA;;;;;;;;AXhBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AADA;;;;;AWoEA;;;;;;;ACdA;AACA;AAEA;AACA;;;AAGA;;;;;;AASA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;AACA;;;;;;;;;;;;AAcA;;;;;;ACvGA;AACA;;AAEA;AACA;;AAIA;;;;;;;;;;;;;AAqBA;AC9CA;AACA;AAaA;AACA;AAGA;AClBA;AACA;AAaA;AACA;AAGA;AClBA;AACA;AAaA;AACA;AAGA;AClBA;AACA;AAaA;AACA;AACA;;;;;;;;;;AAYA","sourceRoot":""}